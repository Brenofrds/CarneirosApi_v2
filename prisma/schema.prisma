generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agente {
  id                   Int      @id @default(autoincrement())
  idExterno            String   @unique // ID do agente na Stays
  nome                 String
  jestorId             Int?
  sincronizadoNoJestor Boolean  @default(false) // Controle de sincronização com o Jestor
  reservas             Reserva[] // Relação com as reservas associadas
}

model Hospede {
  id                   Int       @id @default(autoincrement())
  idExterno            String    @unique // ID externo do hóspede
  nomeCompleto         String    // Nome completo do hóspede
  email                String?   // E-mail do hóspede
  dataDeNascimento     String?   // Data de nascimento do hóspede
  idade                Int?      // Idade do hóspede
  telefone             String?   // Telefone principal do hóspede
  cpf                  String?   // CPF do hóspede
  documento            String?   // Documento de identidade do hóspede
  reservaId            Int       // Relacionamento com a tabela Reserva
  reserva              Reserva   @relation(fields: [reservaId], references: [id])
  jestorId             Int?
  reservaIdJestor      Int?
  sincronizadoNoJestor Boolean   @default(false) // Indica sincronização com o Jestor
}


model Reserva {
  id                   Int       @id @default(autoincrement())
  localizador          String    @unique
  idExterno            String    @unique
  dataDaCriacao        String
  checkIn              String
  horaCheckIn          String?
  checkOut             String
  horaCheckOut         String?
  quantidadeHospedes   Int?
  quantidadeAdultos    Int?
  quantidadeCriancas   Int?
  quantidadeInfantil   Int?
  moeda                String?
  valorTotal           Float
  totalPago            Float
  pendenteQuitacao     Float
  totalTaxasExtras     Float
  quantidadeDiarias    Int
  partnerCode          String?
  linkStays            String
  idImovelStays        String
  origem               String
  status               String
  condominio           String
  condominioTitulo     String?
  regiao               String
  imovelOficialSku     String
  hospedes             Hospede[] // Relação com a tabela Hospede
  imovelId             Int?      
  imovel               Imovel?   @relation(fields: [imovelId], references: [id]) // Relação opcional com Imovel
  agenteId             Int?      
  agente               Agente?   @relation(fields: [agenteId], references: [id]) // Relação com Agente
  canalId              Int?      
  canal                Canal?    @relation(fields: [canalId], references: [id]) // Relação com Canal
  taxasReserva         TaxaReserva[] // Relação com a tabela TaxaReserva
  sincronizadoNoJestor Boolean   @default(false) // Indica sincronização com o Jestor
  jestorId             Int?
  imovelIdJestor       Int?
  observacao           String?
}

model Imovel {
  id                   Int        @id @default(autoincrement())
  idExterno            String     @unique // ID externo (_id) do imóvel na Stays
  idStays              String     @unique // ID interno (id) do imóvel na Stays
  sku                  String?    // Nome interno ou SKU do imóvel (internalName)
  status               String     // Status do imóvel (ex.: hidden, active)
  idCondominioStays    String?    // ID externo do condomínio relacionado
  regiao               String?
  reservas             Reserva[]  // Relação com a tabela Reserva (1 Imóvel -> N Reservas)
  proprietarioId       Int?       
  proprietario         Proprietario? @relation(fields: [proprietarioId], references: [id]) // Relação opcional com Proprietario
  bloqueios            Bloqueio[] // ✅ Adicionado: Relação com a tabela Bloqueio
  jestorId             Int?
  condominioIdJestor   Int?
  sincronizadoNoJestor Boolean    @default(false) // Controle de sincronização com o Jestor
}

model Condominio {
  id                   Int       @id @default(autoincrement())
  idExterno            String    @unique // ID externo (_id) do condomínio na Stays
  idStays              String    @unique // ID interno (id) do condomínio na Stays
  sku                  String    // Nome interno ou SKU do condomínio (internalName)
  regiao               String    // Região do condomínio
  titulo               String?    
  status               String?    // Status do condomínio (active, inactive, etc.)
  jestorId             Int?
  sincronizadoNoJestor Boolean   @default(false) // Controle de sincronização com o Jestor
}

model TaxaReserva {
  id                   Int      @id @default(autoincrement())
  reservaId            Int      // Relacionado à tabela Reserva
  name                 String   // Nome da taxa
  valor                Float    // Valor da taxa
  reserva              Reserva  @relation(fields: [reservaId], references: [id])
  jestorId             Int?
  sincronizadoNoJestor Boolean  @default(false) // Indica sincronização com o Jestor

  @@unique([reservaId, name]) // Evita duplicação de taxas para a mesma reserva
}

model Canal {
  id                   Int      @id @default(autoincrement())
  idExterno            String   @unique  // ID externo do canal (partner._id)
  titulo               String   // Nome do canal (partner.name)
  reservas             Reserva[] // Relação com reservas (1 Canal -> N Reservas)
  jestorId             Int?
  sincronizadoNoJestor Boolean  @default(false) // Controle de sincronização com o Jestor
}

model Proprietario {
  id                   Int       @id @default(autoincrement())
  nome                 String    // Nome do proprietário
  telefone             String?   // Telefone principal do proprietário
  imoveis              Imovel[]  // Relação com os imóveis associados ao proprietário
  jestorId             Int?
  sincronizadoNoJestor Boolean   @default(false) // Indica sincronização com o Jestor

  @@unique([nome, telefone]) // Evita duplicação de proprietários com o mesmo nome e telefone
}

model Bloqueio {
  id                   Int       @id @default(autoincrement()) 
  idExterno            String    @unique // ID externo (_id) do bloqueio na Stays
  localizador          String    @unique // Identificador do bloqueio
  checkIn              String    // Data de check-in do bloqueio
  checkOut             String    // Data de check-out do bloqueio
  horaCheckIn          String?   // Hora de check-in
  horaCheckOut         String?   // Hora de check-out
  notaInterna          String?   // Nota interna associada ao bloqueio
  imovelId             Int?      // Permite `null` se o imóvel não for encontrado
  imovel               Imovel?   @relation(fields: [imovelId], references: [id]) // Relacionado a um imóvel específico
  jestorId             Int?
  imovelIdJestor       Int?
  status               String?
  sincronizadoNoJestor Boolean   @default(false) // Indica sincronização com o Jestor

  @@unique([idExterno, imovelId]) // Garante que o mesmo bloqueio não seja cadastrado duas vezes para o mesmo imóvel
}

model ErroSincronizacaoJestor {
  id                  Int      @id @default(autoincrement())
  tabela              String   // Nome da tabela no banco de dados (ex: "reserva", "imovel")
  registroId          String   // ID do registro no banco de dados
  erro                String   // Mensagem de erro
  tentativas          Int      @default(0) // Número de tentativas de reenvio
  data               DateTime @default(now()) // Data do erro (somente a data)
  hora               String   // Hora do erro (apenas HH:mm:ss)
  sincronizadoNoJestor Boolean @default(false) // Indica sincronização com o Jestor
}

model ErroSincronizacaoStays {
  id                   Int      @id @default(autoincrement())
  acao                 String   // Ação do webhook (ex: "reservation.modified")
  payloadId            String   // ID do payload da 
  payloadJson          String?  
  erro                 String   // Mensagem de erro
  tentativas           Int      @default(0) // Número de tentativas de reprocessamento
  data                 DateTime @default(now()) // Data do erro (somente a data)
  hora                 String   // Hora do erro (apenas HH:mm:ss)
  sincronizadoNoJestor Boolean @default(false) // Indica sincronização com o Jestor
}