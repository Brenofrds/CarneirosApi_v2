generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agente {
  id                   Int      @id @default(autoincrement())
  idExterno              String   @unique // ID do agente na Stays
  nome                 String
  sincronizadoNoJestor Boolean  @default(false) // Controle de sincronização com o Jestor
  reservas             Reserva[] // Relação com as reservas associadas
}

model Hospede {
  id                   Int       @id @default(autoincrement())
  idExterno            String    @unique // ID externo do hóspede
  nomeCompleto         String    // Nome completo do hóspede
  email                String?   // E-mail do hóspede
  dataDeNascimento     String?   // Data de nascimento do hóspede
  telefone             String?   // Telefone principal do hóspede
  cpf                  String?   // CPF do hóspede
  documento            String?   // Documento de identidade do hóspede
  reservaId            Int       // Relacionamento com a tabela Reserva
  reserva              Reserva   @relation(fields: [reservaId], references: [id])
  sincronizadoNoJestor Boolean   @default(false) // Indica sincronização com o Jestor
}


model Reserva {
  id                   Int       @id @default(autoincrement())
  localizador          String    @unique
  idExterno            String    @unique
  dataDaCriacao        String
  checkIn              String
  horaCheckIn          String
  checkOut             String
  horaCheckOut         String
  quantidadeHospedes   Int
  quantidadeAdultos    Int
  quantidadeCriancas   Int
  quantidadeInfantil   Int
  moeda                String
  valorTotal           Float
  totalPago            Float
  pendenteQuitacao     Float
  totalTaxasExtras     Float
  quantidadeDiarias    Int
  partnerCode          String?
  linkStays            String
  idImovelStays        String
  agenteId             String?
  origem               String
  status               String
  condominio           String
  regiao               String
  imovelOficialSku     String
  hospedes             Hospede[] // Relação com a tabela Hospede
  imovelId             Int?      // Tornar opcional
  imovel               Imovel?   @relation(fields: [imovelId], references: [id]) // Relação opcional com Imovel
  agente               Agente?   @relation(fields: [agenteId], references: [idExterno])
  taxasReserva         TaxaReserva[] // Relação com a tabela TaxaReserva
  canalId              Int? // Relacionamento com o canal
  canal                Canal? @relation(fields: [canalId], references: [id]) // Relação opcional com Canal
  sincronizadoNoJestor Boolean   @default(false) // Indica sincronização com o Jestor
}

model Imovel {
  id                   Int       @id @default(autoincrement())
  idExterno            String    @unique // ID externo (_id) do imóvel na Stays
  idStays              String    @unique // ID interno (id) do imóvel na Stays
  sku                  String?   // Nome interno ou SKU do imóvel (internalName)
  status               String    // Status do imóvel (ex.: hidden, active)
  idCondominioStays    String?   // ID externo do condomínio relacionado
  reservas             Reserva[] // Relação com a tabela Reserva (1 Imóvel -> N Reservas)
  sincronizadoNoJestor Boolean   @default(false) // Controle de sincronização com o Jestor
}

model Condominio {
  id                   Int       @id @default(autoincrement())
  idExterno            String    @unique // ID externo (_id) do condomínio na Stays
  idStays              String    @unique // ID interno (id) do condomínio na Stays
  sku                  String    // Nome interno ou SKU do condomínio (internalName)
  regiao               String    // Região do condomínio
  sincronizadoNoJestor Boolean   @default(false) // Controle de sincronização com o Jestor
}

model TaxaReserva {
  id          Int      @id @default(autoincrement())
  reservaId   Int      // Relacionado à tabela Reserva
  name        String   // Nome da taxa
  valor       Float    // Valor da taxa
  reserva     Reserva  @relation(fields: [reservaId], references: [id])

  @@unique([reservaId, name]) // Evita duplicação de taxas para a mesma reserva
}

model Canal {
  id         Int      @id @default(autoincrement())
  idExterno  String   @unique  // ID externo do canal (partner._id)
  titulo     String   // Nome do canal (partner.name)
  reservas   Reserva[] // Relação com reservas (1 Canal -> N Reservas)
}